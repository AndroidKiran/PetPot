apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'

def secretProperties = new Properties()
def secretPropertiesFile = rootProject.file("secrets.properties")
if(secretPropertiesFile.canRead()) {
    secretProperties.load(new FileInputStream(secretPropertiesFile))
} else {
    println 'secrets.properties not found'
}

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.droid47.petpot"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        if (secretProperties != null && secretProperties.containsKey('API_URL')) {
            buildConfigField("String", "API_URL", secretProperties['API_URL'])
        } else {
            println 'secrets.properties found but missing API_URL entry'
        }
        resConfigs "en"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        vectorDrawables.useSupportLibrary = true
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        ndk {
            debugSymbolLevel 'SYMBOL_TABLE'
        }
    }

    signingConfigs {
        releaseConfig {
            Properties props = new Properties()
            def propFile = new File('keystore.properties')
            //absolute path to keystore.properties
            if (propFile.canRead()) {
                props.load(new FileInputStream(propFile))

                if (props != null && props.containsKey('storeFile') && props.containsKey('storePassword') &&
                        props.containsKey('keyAlias') && props.containsKey('keyPassword')) {
                    android.signingConfigs.releaseConfig.storeFile = file(props['storeFile'])
                    android.signingConfigs.releaseConfig.storePassword = props['storePassword']
                    android.signingConfigs.releaseConfig.keyAlias = props['keyAlias']
                    android.signingConfigs.releaseConfig.keyPassword = props['keyPassword']
                } else {
                    println 'keystore.properties found but some entries are missing'
                    android.buildTypes.release.signingConfig = null
                }
            } else {
                println 'keystore.properties not found'
                android.buildTypes.release.signingConfig = null
            }
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-dev"
            applicationIdSuffix '.dev'

            minifyEnabled false
            shrinkResources false
            debuggable true
            aaptOptions.cruncherEnabled = false
//            jniDebuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (secretProperties != null && secretProperties.containsKey('API_URL')) {
                manifestPlaceholders = [mapKey: secretProperties['DEV_GOOGLE_MAP_API_KEY']]
            } else {
                println 'secrets.properties found but missing DEV_GOOGLE_MAP_API_KEY entry'
            }
        }

        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
//            jniDebuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (secretProperties != null && secretProperties.containsKey('API_URL')) {
                manifestPlaceholders = [mapKey: secretProperties['RELEASE_GOOGLE_MAP_API_KEY']]
            } else {
                println 'secrets.properties found but missing RELEASE_GOOGLE_MAP_API_KEY entry'
            }
            signingConfig signingConfigs.releaseConfig
        }

        gradle.taskGraph.beforeTask { Task task ->
            if (task.name ==~ /process.*GoogleServices/) {
                android.applicationVariants.all { variant ->
                    if (task.name ==~ /(?i)process${variant.name}GoogleServices/) {
                        copy {
                            from "/src/${variant.flavorName}"
                            into '.'
                            include 'google-services.json'
                        }
                    }
                }
            }
        }
    }
    flavorDimensions "default"
    productFlavors {
        free {
            dimension "default"
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE-FIREBASE.txt'
        exclude 'META-INF/rxjava.properties'
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->
        variant.resValue "string", "versionName", variant.versionName
    }

    androidExtensions {
        experimental = true
    }

    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
        }
    }
    ndkVersion = '21.3.6528147'

    dependenciesInfo {
        includeInApk = false
        includeInBundle = false
    }

    buildFeatures {
        buildConfig = true
        viewBinding = false
        dataBinding = true
        aidl = false
        renderScript = false
        resValues = true
        shaders = false
    }
}

configurations.all {
    resolutionStrategy {
        force "com.google.auto.value:auto-value-annotations:1.6.2"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "androidx.core:core-ktx:1.3.2"
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.lifecycle:lifecycle-common-java8:2.2.0"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:2.2.0"

    implementation 'androidx.work:work-rxjava2:2.4.0'
    implementation "androidx.room:room-runtime:2.2.5"
    kapt "androidx.room:room-compiler:2.2.5"
    implementation 'androidx.room:room-rxjava2:2.2.5'
    implementation "androidx.navigation:navigation-runtime-ktx:2.3.1"
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.1"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.1"
    implementation "androidx.paging:paging-runtime-ktx:2.1.2"
    implementation "androidx.paging:paging-rxjava2-ktx:2.1.2"

    implementation "com.google.dagger:dagger:2.28.1"
    kapt "com.google.dagger:dagger-compiler:2.28.1"

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'

    implementation 'com.airbnb.android:lottie:3.4.0'

    implementation "io.reactivex.rxjava2:rxjava:2.2.19"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"

    implementation 'com.squareup.retrofit2:retrofit:2.8.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.8.1'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.8.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.5.0'
    implementation 'com.squareup.okhttp3:okhttp:4.5.0'
    implementation "com.facebook.shimmer:shimmer:0.5.0"
    implementation "androidx.preference:preference-ktx:1.1.1"

    implementation "com.google.code.gson:gson:2.8.6"
    implementation "com.google.android.material:material:1.2.1"
    implementation "com.google.android:flexbox:2.0.0"
    implementation 'com.google.android.play:core:1.8.3'
    implementation 'com.google.android.gms:play-services-location:17.1.0'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.maps.android:android-maps-utils:2.0.3'


    //FireBase
    implementation "com.google.firebase:firebase-analytics-ktx:18.0.0"
    implementation "com.google.firebase:firebase-crashlytics-ktx:17.3.0"
    implementation "com.google.firebase:firebase-perf-ktx:19.0.10"
    implementation 'com.google.firebase:firebase-messaging-ktx:21.0.0'
    implementation 'com.google.firebase:firebase-config-ktx:20.0.1'

    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'com.tbuonomo.andrui:viewpagerdotsindicator:4.1.2'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.4'

    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation "androidx.test:runner:1.3.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.3.0"
}
